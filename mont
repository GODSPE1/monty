#include "monty.h"
/**
 * free_mem - free the  allocated memory
 * @arg: string of arguments
 *
 * Return: Nothing
 */
void free_mem(char **arg)
{
	int i;

	for (i = 0; arg[i]; i++)
	{
		if  (arg[i] != NULL)
			free(arg[i]);
	}

	if (arg != NULL)
		free(arg);
}
#include "monty.h"

/**
 * invalid_instruct - prints error message for invalid instruction
 * @line_numb: line number where the opcode is from
 * @opcode: the instruction
 *
 * Return: nothing
 */

void invalid_instruct(size_t line_numb, char *opcode)
{
	fprintf(stderr, "L%ld: unknown instruction %s\n", line_numb, opcode);
	free(instructions);
	exit(EXIT_FAILURE);
}

/**
 * get_instructions - gets and instruction
 * @line_numb: line number where the instruct is from
 * @opcode: instruction from stream
 * @inst: pointer to the instruction_t structure
 *
 * Description: sets an array of instruction and function pointers,
 * interate through the array
 * comparing the opcode from stream with the opcode in struct
 * if found sets the instruction struct in main to the opcode in array
 * and sets the function pointer to the function in array
 *
 * Return: nothing
 */

void get_instructions(size_t line_numb, char *opcode, instruction_t *inst)
{
	int i = 0;
	instruction_t instructions[] = {
		{"push", push},
		{"pall", pall},
		{NULL, NULL}
	};

	for (; instructions[i].opcode != NULL; i++)
	{
		if (strcmp(instructions[i].opcode, opcode) == 0)
		{
			inst->opcode = instructions[i].opcode;
			inst->f = instructions[i].f;
			return;
		}
	}
	invalid_instruct(line_numb, opcode);
}
#include "monty.h"
int main(int argc, char **argv);

/**
 * main - Entry point
 * @argc: Argument count
 * @argv: Argument vector
 *
 * Return: 0
 */


int main(int argc, char **argv)
{
	FILE *file;
	char *line, *delim, *line_cpy;
	size_t len;
	unsigned int line_numb;
	char **opcode;
	stack_t *stack = NULL;
	instruction_t *instructions;

	line = NULL;
	len = 0;
	line_numb = 1;
	delim = " \n";

	if (argc != 2)
	{
		fprintf(stderr, "USAGE: monty file\n");
		exit(EXIT_FAILURE);
	}
	file = fopen(argv[1], "r");
	if (file == NULL)
	{
		fprintf(stderr, "Error: Can't open file %s\n", argv[1]);
		exit(EXIT_FAILURE);
	}
	instructions = malloc(sizeof(instruction_t));
	if (instructions == NULL)
	{
		printf("Error: malloc failed");
		fclose(file);
		exit(EXIT_FAILURE);
	}

	while ((getline(&line, &len, file)) != -1)
	{
		line_cpy = strdup(line);
		if (line_cpy == NULL)
		{
			perror("strdup");
			exit(EXIT_FAILURE);
		}
		if (strspn(line_cpy, " \t\r\n") == strlen(line_cpy))
		{
			free(line_cpy);
			continue;
		}

		opcode = tokenize(line_cpy, delim);
		/*
		 * printf("____line number = %u____\n", line_numb);
		 */

		if (opcode == NULL)
		{
			free(line_cpy);
			continue;
		}

		value = opcode[1];
		get_instructions(line_numb, opcode[0], instructions);
		instructions->f(&stack, line_numb);

		free(line_cpy);
		line_numb += 1;
		free_mem(opcode);
	}

	free(instructions);
	fclose(file);
	return (0);
}
#include "monty.h"
/**
 * push - pushes an integer into the stack.
 * @stack: pointer to the stack.
 * @line_num: line number where the push opcode is from
 *
 * Return: nothing
 */

void push(stack_t **stack, unsigned int line_num)
{
	stack_t *temp;

	if (value == NULL || isalpha(value))
	{
		fprintf(stderr, "L%u: usage: push integer\n", line_num);
		exit(EXIT_FAILURE);
	}

	temp = malloc(sizeof(stack_t));

	if (temp == NULL)
	{
		fprintf(stderr, "Error: malloc failed\n");
		exit(EXIT_FAILURE);
	}

	temp->n = atoi(value);
	temp->next = *stack;
	temp->prev = NULL;

	if (*stack != NULL)
	{
		(*stack)->prev = temp;
	}

	*stack = temp;
}


/**
 * pall - prints all the elements of stack_t list
 * @stack: a pointer to the top node list_t structure
 * @line_num: line number where the pall opcode is from
 *
 * Return: Nothing.
 */
void pall(stack_t **stack, unsigned int line_num)
{
	stack_t *h = *stack;

	(void)line_num;
	while (h != NULL)
	{
		printf("%d\n", h->n);
		h = h->next;
	}
}
#include "monty.h"

/**
 * tokenize - tokenize a char string into array of strings
 * @line: string to be tokenized
 * @delim: delimeter
 *
 * Return: array of strings a
 */

char **tokenize(char *line, char *delim)
{
	char **arg;
	int i = 0;
	size_t len = 0;
	char *token;

	arg = (char **)malloc(101 * sizeof(char *));

	token = strtok(line, delim);

	while (token != NULL)
	{
		len = strlen(token);
		while (len > 0 && !isalnum(token[len - 1]))
		{
			token[--len] = '\0';
		}

		arg[i] = malloc(strlen(token) + 1);
		strcpy(arg[i++], token);
		token = strtok(NULL, delim);
	}
	arg[i] = NULL;
	i = 0;

	return (arg);
}
